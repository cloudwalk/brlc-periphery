// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

/**
 * @title Calendar library
 * @author CloudWalk Inc. (See https://cloudwalk.io)
 * @dev Defines calendar functions for converting timestamps to dates and back.
 *
 * Inspired by: https://git.musl-libc.org/cgit/musl/tree/src/time/__secs_to_tm.c
 */
library Calendar {
    uint256 private constant DAYS_PER_100_YEAR = 365 * 100 + 24;
    uint256 private constant DAYS_PER_4_YEAR = 365 * 4 + 1;
    uint256 private constant DAYS_PER_YEAR = 365;
    uint256 private constant SECONDS_IN_DAY = 86400;
    uint256 private constant MONTHS_PER_YEAR = 12;

    // Base timestamp: 2000-03-01 (mod 400 year, previous date is 29 Feb */
    uint256 private constant BASE_TIMESTAMP = 946684800 + 86400 * (31 + 29);
    uint256 private constant BASE_YEAR = 2000;

    // Last acceptable timestamp: 2399-12-31 23:59:59 GMT
    uint256 private constant LAST_TIMESTAMP = 13569465599;

    bytes private constant MONTH_BY_REBASED_DAY_OF_YEAR =
        hex

    bytes private constant DAY_BY_REBASED_DAY_OF_YEAR =
        hex

    /**
     * @dev Converts a timestamp to a date.
     * @param timestamp The timestamp to convert.
     * @return year The year of the date.
     * @return month The month of the date.
     * @return day The day of the date.
     */
    function timestampToDate(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day) {
        require(timestamp >= BASE_TIMESTAMP);
        require(timestamp <= LAST_TIMESTAMP);

        uint256 remainingDays = (timestamp - BASE_TIMESTAMP) / SECONDS_IN_DAY;

        uint256 centuries = remainingDays / DAYS_PER_100_YEAR;
        remainingDays = remainingDays % DAYS_PER_100_YEAR;

        uint256 yearTetradsInCentury = remainingDays / DAYS_PER_4_YEAR;
        remainingDays = remainingDays % DAYS_PER_4_YEAR;

        year = remainingDays / DAYS_PER_YEAR;
        if (year == 4) {
            --year;
        }

        remainingDays -= year * DAYS_PER_YEAR;
        year += BASE_YEAR + 4 * yearTetradsInCentury + 100 * centuries;

        month = uint256(uint8(MONTH_BY_REBASED_DAY_OF_YEAR[remainingDays]));
        if (month > MONTHS_PER_YEAR) {
            month -= MONTHS_PER_YEAR;
            ++year;
        }
        day = uint256(uint8(DAY_BY_REBASED_DAY_OF_YEAR[remainingDays]));
    }
}
